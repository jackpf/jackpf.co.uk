/* Plugin Template generated by Pawn Studio */

#include <sourcemod>

#define PLUGIN_VERSION "1.31"
#define FL_CUMSKEET 1
#define FL_DEADSTOPS 2
#define FL_ALLSKEET 4
#define FL_CUMASSIST 8
#define HITGROUP_HEAD 1
new pouncing[MAXPLAYERS + 1];
//Skeet damage variables
new damageDone[MAXPLAYERS+1][MAXPLAYERS+1];
new hitsDone[MAXPLAYERS+1][MAXPLAYERS+1];
new headshots[MAXPLAYERS+1][MAXPLAYERS+1];

new String:hitboxNames[8][20] = { "Body", "Head", "Chest", "Stomach", "Left Arm", "Right Arm", "Left Leg", "Right Leg"};

new Handle:hVerbosity;
new Handle:hDeathSkeets;
public Plugin:myinfo = 
{
	name = "Skeet Announce",
	author = "n0limit",
	description = "Announces damage done to a hunter during a pounce in midair (skeets) and dead stops",
	version = PLUGIN_VERSION,
	url = "http://forums.alliedmods.net/showthread.php?p=923976"
}

public OnPluginStart()
{
	HookEvent("player_shoved",Event_PlayerShoved);
	HookEvent("player_hurt",Event_PlayerHurt);
	HookEvent("ability_use",Event_AbilityUse);
	HookEvent("player_death",Event_PlayerDeath);
	
	CreateConVar("skeetannounce_version",PLUGIN_VERSION,"SkeetAnnounce Version",FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY|FCVAR_DONTRECORD);
	hVerbosity = CreateConVar("skeetannounce_verbosity","3","The verbosity level of skeet announce. Default is 3.",FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);
	hDeathSkeets = CreateConVar("skeetannounce_deathskeets","1","Only prints skeet information if the player is killed by the skeet. Otherwise, it prints any damage incured while skeeting. Default is 1.",FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);
}

public Event_PlayerShoved(Handle:event, const String:name[], bool:dontBroadcast)
{
	new victim = GetClientOfUserId(GetEventInt(event, "userid"));
	new attacker = GetClientOfUserId(GetEventInt(event, "attacker"));
	new String:attackerName[MAX_NAME_LENGTH];
	new String:victimName[MAX_NAME_LENGTH];
	
	//If the hunter lands on another player's head, they're technically grounded.
	//Instead of using isGrounded, this uses the pouncing[] array with less precise timer
	if(pouncing[victim] && GetConVarInt(hVerbosity) & FL_DEADSTOPS)
	{ //Dead Stop
		pouncing[victim] = false; //Hunter was deadstopped so he can no longer be pouncing
		resetSkeetDamage(victim); //Reset the damage done to him so far as well
		GetClientName(victim,victimName,sizeof(victimName));
		GetClientName(attacker,attackerName,sizeof(attackerName));
		PrintToChatAll("%s deadstopped %s",attackerName, victimName);
	}
}

public Event_PlayerHurt(Handle:event, const String:name[], bool:dontBroadcast)
{
	new user = GetClientOfUserId(GetEventInt(event, "userid"));
	
	if(pouncing[user])
	{ 
		new attacker = GetClientOfUserId(GetEventInt(event, "attacker"));
		new victim = GetClientOfUserId(GetEventInt(event,"userid"));
		new damage = GetEventInt(event,"dmg_health");
		new hitGroup = GetEventInt(event,"hitgroup");
		new String:attackerName[MAX_NAME_LENGTH];
		new String:victimName[MAX_NAME_LENGTH];
		new String: weapon[MAX_NAME_LENGTH];

		GetEventString(event,"weapon",weapon,sizeof(weapon));
		GetClientName(victim,victimName,sizeof(victimName));
		GetClientName(attacker,attackerName,sizeof(attackerName));
		if(isAcceptableWeapon(weapon))
		{
			if(GetConVarInt(hVerbosity) & FL_CUMSKEET || GetConVarInt(hVerbosity) & FL_CUMASSIST)
			{
				damageDone[victim][attacker] += damage;
				hitsDone[victim][attacker]++;
				if(hitGroup == HITGROUP_HEAD)
					headshots[victim][attacker]++;
			}
			if(GetConVarInt(hVerbosity) & FL_ALLSKEET)
				PrintToChatAll("%s skeeted %s in the %s with %s for %d HP",attackerName,victimName,hitboxNames[hitGroup],weapon,damage);
		}
	}
}

public Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
	new attacker = GetClientOfUserId(GetEventInt(event, "attacker"));
	new victim = GetClientOfUserId(GetEventInt(event,"userid"));
	new String:victimName[MAX_NAME_LENGTH];
	new String:playerName[MAX_NAME_LENGTH];
	new String:attackerName[MAX_NAME_LENGTH];
	
	GetClientName(victim,victimName,sizeof(victimName));
	GetClientName(attacker,attackerName,sizeof(attackerName));
	if(!GetConVarBool(hDeathSkeets) || pouncing[victim])
	{
		if(GetConVarInt(hVerbosity) & FL_CUMSKEET)
		{
			for(new i=0; i < MaxClients;i++)
			{
				if(hitsDone[victim][i] > 0)
				{
					if (isClient(attacker)) //Make sure they were killed by a player
					{
						GetClientName(i,playerName,sizeof(playerName));
						if(headshots[victim][i] > 0)
							PrintToChatAll("%s skeeted %s, landing %d bullet(s) with %d headshot(s) for %d damage", playerName,victimName,hitsDone[victim][i],headshots[victim][i],damageDone[victim][i]);
						else
							PrintToChatAll("%s skeeted %s, landing %d bullet(s) for %d damage", playerName,victimName,hitsDone[victim][i],damageDone[victim][i]);
					}
					hitsDone[victim][i] = 0;
					damageDone[victim][i] = 0;
					headshots[victim][i] = 0;
				}
			}
		}
		if (GetConVarInt(hVerbosity) & FL_CUMASSIST)
		{
			new assists[MAXPLAYERS+1];
			new assistCount = 0;
			for(new i=0; i < MaxClients;i++)
			{
				if(hitsDone[victim][i] > 0)
				{
					if (attacker != i) //Don't count the player that gets the final shot as an assist
					{
						assists[assistCount] = i;
						assistCount++;
					}
					hitsDone[victim][i] = 0;
					damageDone[victim][i] = 0;
					headshots[victim][i] = 0;
				}
			}
			if (isClient(attacker)) //Make sure they were killed by a player
			{
				new String:assistMessage[( (MAX_NAME_LENGTH + 2) * MAXPLAYERS ) + 4] = "";
				new String:tempConcat[MAX_NAME_LENGTH+6];
				for(new i=0; i < assistCount; i++)
				{
					GetClientName(assists[i], playerName, sizeof(playerName));
					if (i == 0) //First player to assist
					{
						Format(tempConcat, sizeof(tempConcat), "%s", playerName);
					}
					else if (i == (assistCount-1) && assistCount > 2) //Special case for last player assisting when 3 or more players assisted
					{
						Format(tempConcat, sizeof(tempConcat), ", and %s", playerName);
					}
					else if (i == (assistCount-1) && assistCount == 2) //Special case for last player assisting when only 2 players assisted
					{
						Format(tempConcat, sizeof(tempConcat), " and %s", playerName);
					}
					else //Every assisting player between the first and the last
					{
						Format(tempConcat, sizeof(tempConcat), ", %s", playerName);
					}
					StrCat(assistMessage, sizeof(assistMessage), tempConcat); //Append the assisting player to the list of players that have assisted
				}
				if (assistCount > 0) //There were some assists with the skeet
				{
					PrintToChatAll("%s skeeted %s with the assistance of %s", attackerName, victimName, assistMessage);
				}
				else //Solo skeet
				{
					PrintToChatAll("%s skeeted %s", attackerName, victimName);
				}
			}
		}
	}
}

public Event_AbilityUse(Handle:event, const String:name[], bool:dontBroadcast)
{
	new user = GetClientOfUserId(GetEventInt(event, "userid"));
	new String:abilityName[64];
	
	GetEventString(event,"ability",abilityName,sizeof(abilityName));
	if(isClient(user) && strcmp(abilityName,"ability_lunge",false) == 0 && !pouncing[user])
	{
		//Hunter pounce
		pouncing[user] = true;
		CreateTimer(0.5,groundTouchTimer,user,TIMER_REPEAT);
	}
	else if (pouncing[user])
	{
		//Hunter is pouncing again so he must of already landed and the timer didn't catch it
		resetSkeetDamage(user);
	}
}

public Action:groundTouchTimer(Handle:timer, any:client)
{
	if((isClient(client) && isGrounded(client)) || !IsPlayerAlive(client))
	{
		//Reached the ground or died in mid-air
		pouncing[client] = false;
		resetSkeetDamage(client);
		KillTimer(timer);
	}
}

public bool:isGrounded(client)
{
	return (GetEntProp(client,Prop_Data,"m_fFlags") & FL_ONGROUND) > 0;
}

public bool:isClient(client)
{
	return IsClientConnected(client) && IsClientInGame(client) && !IsFakeClient(client);
}

public bool:isAcceptableWeapon(const String:weapon[])
{
	if(strcmp(weapon,"autoshotgun") == 0 || strcmp(weapon,"smg") == 0 || strcmp(weapon,"rifle") == 0 || 
	strcmp(weapon,"pumpshotgun") == 0 || strcmp(weapon,"hunting_rifle") == 0 || strcmp(weapon,"pistol") == 0 ||
	strcmp(weapon,"pipe_bomb") == 0 || strcmp(weapon,"prop_minigun") == 0)
		return true;
	return false;
}

public resetSkeetDamage(any:client)
{
	for(new i=0; i < MaxClients; i++)
	{
		hitsDone[client][i] = 0;
		damageDone[client][i] = 0;
		headshots[client][i] = 0;
	}
}